1.ThEENSOFT Model: A reference model for green and sustainable software and its neering.
1-1.ThEENSOFT Model: A reference model for green and sustainable software and its neering.

2.The resource and power consumption of ICT is still increasing, but also the benefits of ICT,  in finding more efficient solutions for environmental problems. To date, it is not clear, whether the resource and en savings through ICT overbalance the resource and en consumption by ICT, or not. Up to now, manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware. However, there is still a lack of models, descriptions or realizations in the area of computer software and software process models. In our contribution, we first propose definitions of the terms 'Green and Sustainable Software' and 'Green and Sustainable Software neering', then we outline a conceptual reference model, thEENSOFT Model. This model includes a cradle-to-grave product life cycle model for software products, sustainability metrics and criteria for software, software neering extensions for sustainably sound software design and development, as well as appropriatidance.
2-1.The resource and power consumption of ICT is still increasing, but also the benefits of ICT,  in finding more efficient solutions for environmental problems. 
2-2.To date, it is not clear, whether the resource and en savings through ICT overbalance the resource and en consumption by ICT, or not. 
2-3.Up to now, manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware. #relationship:B# 2-4.However, there is still a lack of models, descriptions or realizations in the area of computer software and software process models. 
2-5.In our contribution, we first propose definitions of the terms 'Green and Sustainable Software' and 'Green and Sustainable Software neering', then we outline a conceptual reference model, thEENSOFT Model. 
2-6.This model includes a cradle-to-grave product life cycle model for software products, sustainability metrics and criteria for software, software neering extensions for sustainably sound software design and development, as well as appropriatidance.

3.Green houss effects, climate change and, as a means to mitigate these, Sustainable Development  are the major challs, mankind is faced with in the world of today. Information and Communication Technology  makes up a considerable constituent of these complex challs. On the one hand, ICT has the potential to push SD, if it is used to optimize material flows or to substitute material products with their virtual counterparts, which reduces en and resource consumption[2]. On the other hand, its ever-increasing usage induces rising demands for en and resources. As an effect, the approximated en consumption of U.S. data centers increased from 28 billion kWh in 2000 up to 61 billion kWh in 2006. Meanwhile, estimations rose from 58 billion kWh in 2000 up to 123 billion kWh in 2005 on a global scale. Previous academic research discussed the relationship between SD and ICT. These works focus on the impacts of ICT on environmental sustainability or on the balance between en and resource savings by ICT and en and resource consumption of ICT. Unfortunately, up to now, no consent has been found on whether en and resource savings by ICT will exceed its en and resource consumption or not. Our contribution presents thEENSOFT Model, a model of 'Green and Sustainable Software' addressing both challs: the reduction of the en and resource consumption in ICT, as well as the use of ICT to contribute to SD. In general, the proposed reference model can be classified into the new research field of Sustainability Informatics.
3-1.Green houss effects, climate change and, as a means to mitigate these, Sustainable Development  are the major challs, mankind is faced with in the world of today. 
3-2.Information and Communication Technology  makes up a considerable constituent of these complex challs. 
3-3.On the one hand, ICT has the potential to push SD, if it is used to optimize material flows or to substitute material products with their virtual counterparts, which reduces en and resource consumption[2]. 
3-4.On the other hand, its ever-increasing usage induces rising demands for en and resources. 
3-5.As an effect, the approximated en consumption of U.S. data centers increased from 28 billion kWh in 2000 up to 61 billion kWh in 2006. 
3-6.Meanwhile, estimations rose from 58 billion kWh in 2000 up to 123 billion kWh in 2005 on a global scale. 
3-7.Previous academic research discussed the relationship between SD and ICT. #relastionship:0# 3-8.These works focus on the impacts of ICT on environmental sustainability or on the balance between en and resource savings by ICT and en and resource consumption of ICT. 
3-9.Unfortunately, up to now, no consent has been found on whether en and resource savings by ICT will exceed its en and resource consumption or not. Our contribution presents thEENSOFT Model, a model of 'Green and Sustainable Software' addressing both challs: the reduction of the en and resource consumption in ICT, as well as the use of ICT to contribute to SD. 
3-10.In general, the proposed reference model can be classified into the new research field of Sustainability Informatics.

4.Until now, there are many publications available discussing the relationship between ICT and SD. Berkhout and Hertin identified three main impacts of ICT on the environment, while summarizing literature on the topic. These impacts are: first-, second-, and third-order impacts. First-order impacts are environmental effects that result from production and use of ICT, i.e. resource use and pollution from mining, hardware production, power consumption during usage, and disposal of electronic equipment waste. Second order impacts are effects that result indirectly from using ICT, like en and resource conservation by process optimization (dematerialization effects), or resource conservation by substitution of material products with their immaterial counterparts (substitution effects). Third-order impacts are long term indirect effects on the environment that result from ICT usage, like changing life styles that promote faster economic growth and, at worst, outw the formerly achieved savings (rebound effects). These effects do not appear sequentially and disconnected. In reality they are nested, which means that second-order effects can only em on the basis of first-order effects and third-order effects can only appear as ramifications of second-order effects. These findings, which focus mainly on environmental aspects, can be refined to address also human and social sustainability issues of ICT production and use. Here, the effects of ICTs are called 'effects of ICT supply' (first-order effects), 'effects of ICT usage' (second-order effects), and 'systemic effects of ICT' (third-order effects). They substantially describe the same effects as Berkhout and Hertin described, but without limiting these to environmental issues.
4-1.Until now, there are many publications available discussing the relationship between ICT and SD. 
4-2.Berkhout and Hertin  identified three main impacts of ICT on the environment, while summarizing literature on the topic. #relationship:0# 4-3.These impacts are: first-, second-, and third-order impacts. 
4-4.First-order impacts are environmental effects that result from production and use of ICT, i.e. resource use and pollution from mining, hardware production, power consumption during usage, and disposal of electronic equipment waste. 
4-5.Second order impacts are effects that result indirectly from using ICT, like en and resource conservation by process optimization (dematerialization effects), or resource conservation by substitution of material products with their immaterial counterparts (substitution effects). 
4-6.Third-order impacts are long term indirect effects on the environment that result from ICT usage, like changing life styles that promote faster economic growth and, at worst, outw the formerly achieved savings (rebound effects). #relationship:0# 4-7.These effects do not appear sequentially and disconnected. #relationship:0# 4-8.In reality they are nested, which means that second-order effects can only em on the basis of first-order effects and third-order effects can only appear as ramifications of second-order effects. 
4-9.These findings, which focus mainly on environmental aspects, can be refined to address also human and social sustainability issues of ICT production and use . 
4-10.Here, the effects of ICTs are called 'effects of ICT supply' (first-order effects), 'effects of ICT usage' (second-order effects), and 'systemic effects of ICT' (third-order effects). #relationship:0# 4-11.They substantially describe the same effects as Berkhout and Hertin described, but without limiting these to environmental issues.

5.Hilty  developed a model that combines standard Life Cycle Assessment  with the afore mentioned effects, to show the potential impacts of ICTs on the life cycle of other products. He applied his model to fields of ICT applications, which have been said to have a high carbon dioxide reduction potential and he identifies obstacles that hinder the use of these potentials. Fuchs discusses the relationship of ICT and SD and dismantles the myths that teleworking has reduced the need to travel and that information economy is nearly wtless and dematerialized. Hilty  showed that new versions of a software product on current hardware are not necessarily more productive than the older version and can be even less productive. Behrend  investigated the problem of conflicts that are exacerbated by the extraction of raw materials widely used in electronic products and components. Related to social sustainability, these conflicts can be valued as social sustainability related thirdorder effects of ICT production. First- and second-order impacts on social and human acceptability of ICT production and electronic waste disposal have been investigated by Borman and Plank, Chan and Ho, Prakash and Manhart, and many others. Their discussions range from wages below the statutory minimum to excessive working hours and from forced overtime to health and safety risks.
5-1.Hilty developed a model that combines standard Life Cycle Assessment  with the afore mentioned effects, to show the potential impacts of ICTs on the life cycle of other products. #relationship:0# 5-2.He applied his model to fields of ICT applications, which have been said to have a high carbon dioxide reduction potential and he identifies obstacles that hinder the use of these potentials. 
5-3.Fuchs discusses the relationship of ICT and SD and dismantles the myths that teleworking has reduced the need to travel and that information economy is nearly wtless and dematerialized. 
5-4.Hilty  showed that new versions of a software product on current hardware are not necessarily more productive than the older version and can be even less productive. 
5-5.Behrend  investigated the problem of conflicts that are exacerbated by the extraction of raw materials widely used in electronic products and components. 
5-6.Related to social sustainability, these conflicts can be valued as social sustainability related thirdorder effects of ICT production. 
5-7.First- and second-order impacts on social and human acceptability of ICT production and electronic waste disposal have been investigated by Borman and Plank, Chan and Ho, Prakash and Manhart, and many others. #relationship:0# 5-8.Their discussions range from wages below the statutory minimum to excessive working hours and from forced overtime to health and safety risks.

6.Coroama and Hilty investigated the two popular directions of ICT: reducing the en consumption of ICT itself and reducing the environmental impacts on other sectors by ICT. They make the case that these two directions should be integrated in order to assess net green houss emissions in specific application areas of ICT. They argue that reports in this area  independently look at these two aspects without taking into account that en savings in ICT application areas may be overcompensated by thowth of ICT appliances that are necessary to achieve these savings. Mocigemba introduced a sustainable computing concept that can be used to classify and understand the different directions in this area. This concept implements three different foci at a time for the material level of ICT (hardware) and for the informational level of ICT (software). The first level focuses on the product, the second on the production process, and the third on the consumption process. Thven examples mainly deal with social and human issues of computer use. They hardly consider neither environmental issues nor that en and resource consumption of ICT is related to the potential of en and resource conservation induced by ICT. Abenius relates effects of ICT products to their life cycle phases and identifies that 'Green Software' can mitigate first-order impacts of ICT usage. She proposes a grouping of 'Green Software' into 'existing tools' and 'new inventions', which are then further divided into the categories 'monitor and measure' as well as 'increasing performance'.
6-1.Coroama and Hilty investigated the two popular directions of ICT: reducing the en consumption of ICT itself and reducing the environmental impacts on other sectors by ICT. #relationship:0# 6-2.They make the case that these two directions should be integrated in order to assess net green houss emissions in specific application areas of ICT. #relationship:0# 6-3.They argue that reports in this area  independently look at these two aspects without taking into account that en savings in ICT application areas may be overcompensated by thowth of ICT appliances that are necessary to achieve these savings. 
6-4.Mocigemba introduced a sustainable computing concept that can be used to classify and understand the different directions in this area. #relationship:0# 6-5.This concept implements three different foci at a time for the material level of ICT (hardware) and for the informational level of ICT (software). 
6-6.The first level focuses on the product, the second on the production process, and the third on the consumption process. 
6-7.Thven examples mainly deal with social and human issues of computer use. #relationship:0# 6-8.They hardly consider neither environmental issues nor that en and resource consumption of ICT is related to the potential of en and resource conservation induced by ICT. 
6-9.Abenius relates effects of ICT products to their life cycle phases and identifies that 'Green Software' can mitigate first-order impacts of ICT usage. #relationship:0# 6-10.She proposes a grouping of 'Green Software' into 'existing tools' and 'new inventions', which are then further divided into the categories 'monitor and measure' as well as 'increasing performance'.

7.Albertao  relate common software quality aspects like modifiability, portability, or performance to the interdependent areas of SD, namely economy, society, and environment. They also present some metrics, usually used to measure these quality aspects, but lack showing how the resulting values should be interpreted in order to achieve the intended effects on SD. Besides these, they propose a simple improvement cycle that can be applied in software development projects and that has the objective to improve the sustainability of the software product from one release to the following.
7-1.Albertao  relate common software quality aspects like modifiability, portability, or performance to the interdependent areas of SD, namely economy, society, and environment. #relationship:0# 7-2.They also present some metrics, usually used to measure these quality aspects, but lack showing how the resulting values should be interpreted in order to achieve the intended effects on SD. #relationship:D# 7-3.Besides these, they propose a simple improvement cycle that can be applied in software development projects and that has the objective to improve the sustainability of the software product from one release to the following.

8.Arndt  discuss implications of evolving releases of a widely used text processor and relate these to Green IT and SD. As a solution to cope with sustainability issues during software design and development, they propose the so called 'Grand Management Information Design', which tries to transfer the Bauhaus design principles to immaterial software products. Dick and Naumann presented a generic enhancement for software development processes that institutionalizes the consideration of sustainability issues during software design and development. Kansal  introduced 'Joulemeter', a tool that estimates the pro rata power consumption of virtualized servers running on one hardware server. It uses a power model that leverages CPU usage and disk IO of each virtual server in order to estimate its power consumption. The specific power parameters of server hardware are determined with power meters (either an internal or external one), whereas the model parameters are learned in situ. Zapico and Turpeinen introduced 'Greenanalytics', a tool that visualizes the impact of websites on the environment by using data from Google Analytics. Amsel and Tomlinson presented 'Green Tracker', a tool that estimates the en consumption of software in order to help users to make informed decisions about the software they use. Both tools have the objective to raise awareness of software induced en consumption among users as well as software developers. Naumann  presented the 'Power Indicator' (now called 'Green Power Indicator'), an addon for a popular web browser, which visualizes, whether or not the web server that hosts the current websites powered by renewable en.
8-1.Arndt  discuss implications of evolving releases of a widely used text processor and relate these to Green IT and SD. #relationship:0# 8-2.As a solution to cope with sustainability issues during software design and development, they propose the so called 'Grand Management Information Design', which tries to transfer the Bauhaus design principles to immaterial software products. 
8-3.Dick and Naumann presented a generic enhancement for software development processes that institutionalizes the consideration of sustainability issues during software design and development. 
8-4.Kansal  introduced 'Joulemeter', a tool that estimates the pro rata power consumption of virtualized servers running on one hardware server. #relationship:0# 8-5.It uses a power model that leverages CPU usage and disk IO of each virtual server in order to estimate its power consumption. 
8-6.The specific power parameters of server hardware are determined with power meters (either an internal or external one), whereas the model parameters are learned in situ. 
8-7.Zapico and Turpeinen introduced 'Greenanalytics', a tool that visualizes the impact of websites on the environment by using data from Google Analytics. 
8-8.Amsel and Tomlinson presented 'Green Tracker', a tool that estimates the en consumption of software in order to help users to make informed decisions about the software they use. #relationship:0# 8-9.Both tools have the objective to raise awareness of software induced en consumption among users as well as software developers. 
8-10.Naumann  presented the 'Power Indicator' (now called 'Green Power Indicator'), an addon for a popular web browser, which visualizes, whether or not the web server that hosts the current websites powered by renewable en.

9.Capra  investigated the impacts of different software systems on IT en consumption. They state that en efficiency issues are mainly focusing on hardware. However, in the rare cases in which they focus on software, it usually is on embedded software, where en is a strictly limited resource. They find that different software products that satisfy the same functional requirements differ significantly in their direct en consumption.
9-1.Capra  investigated the impacts of different software systems on IT en consumption. #relationship:0# 9-2.They state that en efficiency issues are mainly focusing on hardware. #relationship:B# 9-3.However, in the rare cases in which they focus on software, it usually is on embedded software, where en is a strictly limited resource. #relationship:0# 9-4.They find that different software products that satisfy the same functional requirements differ significantly in their direct en consumption.

10.Furthermore, they showed that improving time performance of a software product may not necessarily lead to lower en consumption. There are also some supporting tools and guidelines available for software neers that present best practices on how en efficiency of software can be optimized, , on how data transfer volumes of websites can be reduced, , or on how software artifacts can be instrumentalized and analyzed in order to measure the en consumption induced by them.
10-1.Furthermore, they showed that improving time performance of a software product may not necessarily lead to lower en consumption. 
10-2.There are also some supporting tools and guidelines available for software neers that present best practices on how en efficiency of software can be optimized, , on how data transfer volumes of websites can be reduced, , or on how software artifacts can be instrumentalized and analyzed in order to measure the en consumption induced by them.

11.What is Green and Sustainable Software.
11-1.What is Green and Sustainable Software.

12.Before presenting our model, it is necessary to clarify what we understand by 'Green and Sustainable Software' and 'Green and Sustainable Software neering'. Hence, wve two definitions in this section. These definitions are based on the background of holistic product life cycles in the sense of LCA or a 'cradle-to-grave' approach, the findings on the three different levels of impacts of ICTs on SD, and Hilty’s work on impacts of services offered by ICTs on the life cycles of other products and services. In principle, a software product that is attributed as 'Green and Sustainable' should itself be as sustainable as possible. This means that economic, societal, and ecological impacts, as well as impacts on human beings that result from the product over its whole life cycle, should be as small as possible. Most obvious are the first-order effects (or: effects of ICT supply), like performance requirements, network bandwidth, hardware requirements, and product packaging that directly lead to a more or less specific demand of en or natural resources. The second-order effects (or: effects of ICT usage) evolve from using the services offered by ICTs on the life cycle of other products or services. Today, the services offered by ICTs are usually realized by some kind of software. Therefore, software plays a significant role in the life cycles of many other products or services: software can be used to optimize product design, production processes, the end-of-life treatment, or the usage of other products or services. Unfortunately, these second-order effects are not as obvious as the first-order effects. Even harder to predict or analyze are third-order effects (or: systemic effects of ICT), because of the manifold systemic interdependencies, which require experienced knowl from examiners. One example are rebound effects that may occur, if a specific optimization frees used resources, which can be used to produce more products, which then causes additional demand for these resources. This may in turn overcompensate the initially achieved savings. First-order effects deal with the term 'Green IT', second- and third-order effects are connected with 'Green by IT'.
12-1.Before presenting our model, it is necessary to clarify what we understand by 'Green and Sustainable Software' and 'Green and Sustainable Software neering'. #relationship:A# 12-2.Hence, wve two definitions in this section. #relationship:0# 12-3.These definitions are based on the background of holistic product life cycles in the sense of LCA or a 'cradle-to-grave' approach, the findings on the three different levels of impacts of ICTs on SD, and Hilty’s work on impacts of services offered by ICTs on the life cycles of other products and services. 
12-4.In principle, a software product that is attributed as 'Green and Sustainable' should itself be as sustainable as possible. #relationship:0# 12-5.This means that economic, societal, and ecological impacts, as well as impacts on human beings that result from the product over its whole life cycle, should be as small as possible. 
12-6.Most obvious are the first-order effects (or: effects of ICT supply), like performance requirements, network bandwidth, hardware requirements, and product packaging that directly lead to a more or less specific demand of en or natural resources. 
12-7.The second-order effects (or: effects of ICT usage) evolve from using the services offered by ICTs on the life cycle of other products or services. 
12-8.Today, the services offered by ICTs are usually realized by some kind of software. #relationship:A# 12-9.Therefore, software plays a significant role in the life cycles of many other products or services: software can be used to optimize product design, production processes, the end-of-life treatment, or the usage of other products or services. 
12-10.Unfortunately, these second-order effects are not as obvious as the first-order effects. 
12-11.Even harder to predict or analyze are third-order effects (or: systemic effects of ICT), because of the manifold systemic interdependencies, which require experienced knowl from examiners. 
12-12.One example are rebound effects that may occur, if a specific optimization frees used resources, which can be used to produce more products, which then causes additional demand for these resources. #relationship:0# 12-13.This may in turn overcompensate the initially achieved savings. #relationship:0# 12-14.First-order effects deal with the term 'Green IT', second- and third-order effects are connected with 'Green by IT'.

13.As can be seen from the previous paragraph, saving en or resources by optimizing ICTs is only one aspect. The equally important aspect covers en and resources that can be conserved by the usage of ICTs on other products and services. Seen from a broader point of view, not limited to resources or en, the question is how negative impacts on ecology, society, human beings, and economy can be mitigated and how positive impacts on these can be promoted.
13-1.As can be seen from the previous paragraph, saving en or resources by optimizing ICTs is only one aspect. 
13-2.The equally important aspect covers en and resources that can be conserved by the usage of ICTs on other products and services. 
13-3.Seen from a broader point of view, not limited to resources or en, the question is how negative impacts on ecology, society, human beings, and economy can be mitigated and how positive impacts on these can be promoted.

14.The problem here is that there is software that directly promotes sustainability aspects, like resource or en efficiency, because it is its intended purpose,  software that enables smart heating, smart lighting, smart logistics, paper free offices,  In these cases, it is relatively easy to assess second-order effects of the software. However, there is also multipurpose software, like word processors, spread sheets, or graphics software. For these, it is nearly impossible to assess second- or third-order impacts that result from using the software product, because software manufacturers usually do not know for which purposes their software product is used. Hence, a sustainable software product itself should have a low impact on SD and if it is its purpose, it should promote SD. These basic requirements for green or sustainable software are expressed in Definition 1.
14-1.The problem here is that there is software that directly promotes sustainability aspects, like resource or en efficiency, because it is its intended purpose,  software that enables smart heating, smart lighting, smart logistics, paper free offices.  #relationship:0# 14-2.In these cases, it is relatively easy to assess second-order effects of the software. #relationship:B# 14-3.However, there is also multipurpose software, like word processors, spread sheets, or graphics software. #relationship:0# 14-4.For these, it is nearly impossible to assess second- or third-order impacts that result from using the software product, because software manufacturers usually do not know for which purposes their software product is used. #relationship:A# 14-5.Hence, a sustainable software product itself should have a low impact on SD and if it is its purpose, it should promote SD. #relationship:0# 14-6.These basic requirements for green or sustainable software are expressed in Definition 1.

15.Definition '[Green and Sustainable Software] is software, whose direct and indirect negative impacts on economy, society, human beings, and environment that result from development, deployment, and usage of the software are minimal and/or which has a positive effect on sustainable development'. However, a green and sustainable software product can only be achieved, if a developing organization is aware of negative and positive impacts on SD that will likely be caused when using it. In order to enable the various stakeholders to recognize these impacts, it is necessary to institutionalize their assessment and recognition in the applied software development processes. This makes sustainability issues manageable and puts software architects, designers, and developers in a position to optimize their software product accordingly. Additionally, it is necessary that the development process itself is environment-friendly. These two aspects are expressed in Definition 2.
15-1.Definition '[Green and Sustainable Software] is software, whose direct and indirect negative impacts on economy, society, human beings, and environment that result from development, deployment, and usage of the software are minimal and/or which has a positive effect on sustainable development'. #relationship:B# 15-2.However, a green and sustainable software product can only be achieved, if a developing organization is aware of negative and positive impacts on SD that will likely be caused when using it. 
15-3.In order to enable the various stakeholders to recognize these impacts, it is necessary to institutionalize their assessment and recognition in the applied software development processes. 
15-4.This makes sustainability issues manageable and puts software architects, designers, and developers in a position to optimize their software product accordingly. #relationship:D# 15-5.Additionally, it is necessary that the development process itself is environment-friendly. #relationship:0# 15-6.These two aspects are expressed in Definition 2.

16.Definition Green and Sustainable Software neering is the art of developing green and sustainable software with a green and sustainable software neering process. Therefore, it is the art of defining and developing software products in a way, so that the negative and positive impacts on sustainable development that result and/or are expected to result from the software product over its whole life cycle are continuously assessed, documented, and used for a further optimization of the software product.
16-1.Definition Green and Sustainable Software neering is the art of developing green and sustainable software with a green and sustainable software neering process. #relationship:A# 16-2.Therefore, it is the art of defining and developing software products in a way, so that the negative and positive impacts on sustainable development that result and/or are expected to result from the software product over its whole life cycle are continuously assessed, documented, and used for a further optimization of the software product.

17.ThEENSOFT Model is a conceptual reference model for 'Green and Sustainable Software', which has the objective to support software developers, administrators, and software users in creating, maintaining, and using software in a more sustainable way. The model  comprises a holistic life cycle model for software products, sustainability criteria and metrics for software products, procedure models for different stakeholders, and recommendations for action, as well as tools that support stakeholders in developing, purchasing, supplying, and using software in a green and sustainable manner.
17-1.ThEENSOFT Model is a conceptual reference model for 'Green and Sustainable Software', which has the objective to support software developers, administrators, and software users in creating, maintaining, and using software in a more sustainable way. 
17-2.The model  comprises a holistic life cycle model for software products, sustainability criteria and metrics for software products, procedure models for different stakeholders, and recommendations for action, as well as tools that support stakeholders in developing, purchasing, supplying, and using software in a green and sustainable manner.

18.The reference model contains a Life Cycle of Software Products. That is, in contrast to traditional life cycles of software, geared to Life Cycle Thinking , which follows the motto: 'from cradle to grave'. LCT has the objective to assess the ecological, social, human, and economic compatibility of a product during its whole life cycle. It begins with the early stages of product development and ends with the product’s disposal and recycling. The findings gained from these assessments can then be used for a balanced optimization of the product or for comparing a product with its competitors.
18-1.The reference model contains a Life Cycle of Software Products. #relationship:0# 18-2.That is, in contrast to traditional life cycles of software, geared to Life Cycle Thinking , which follows the motto: 'from cradle to grave'. 
18-3.LCT has the objective to assess the ecological, social, human, and economic compatibility of a product during its whole life cycle. #relationship:0# 18-4.It begins with the early stages of product development and ends with the product’s disposal and recycling. #relationship:0# 18-5.The findings gained from these assessments can then be used for a balanced optimization of the product or for comparing a product with its competitors.

19.The second part of thEENSOFT Model is called Sustainability Criteria and Metrics. It covers common metrics and criteria for the measurement of software quality and it allows a classification of criteria and metrics for evaluating a software product’s sustainability. Appropriate criteria and metrics may comprise models for the measurement of software quality, procedure models for software development, as well as methods borrowed from LCA. Here, we distinguish direct criteria and metrics (related to firstorder effects) from those which indirectly concern sustainability (related to second-and third-order effects). The model component Procedure Models makes it possible to classify procedure models that cover acquisition and development of software, maintenance of IT systems, and user support. As an example, we proposed a generic extension for ambiguous software development processes that enables the systematic consideration of sustainability aspects during software development. The last component of the model contains Recommendations and Tools. These support stakeholders with different professional skill levels in applying green or sustainable techniques in general, when developing, purchasing, administrating, or using software products. Possible roles are software developers, acquirers of software, administrators, as well as professional and private users.
19-1.The second part of thEENSOFT Model is called Sustainability Criteria and Metrics. #relationship:0# 19-2.It covers common metrics and criteria for the measurement of software quality and it allows a classification of criteria and metrics for evaluating a software product’s sustainability. 
19-3.Appropriate criteria and metrics may comprise models for the measurement of software quality, procedure models for software development, as well as methods borrowed from LCA. 
19-4.Here, we distinguish direct criteria and metrics (related to firstorder effects) from those which indirectly concern sustainability (related to second-and third-order effects). 
19-5.The model component Procedure Models makes it possible to classify procedure models that cover acquisition and development of software, maintenance of IT systems, and user support. #relationship:C# 19-6.As an example, we proposed a generic extension for ambiguous software development processes that enables the systematic consideration of sustainability aspects during software development. 
19-7.The last component of the model contains Recommendations and Tools. 
19-8.These support stakeholders with different professional skill levels in applying green or sustainable techniques in general, when developing, purchasing, administrating, or using software products. 
19-9.Possible roles are software developers, acquirers of software, administrators, as well as professional and private users.

20.The Life Cycle of Software Products , included in thEENSOFT model, is a LCT inspired product life cycle that can also be attributed with 'from cradle-to-grave'. Its objective is to enable stakeholders to assess impacts on SD according to the three different levels of impacts, as discussed in What is Green and Sustainable Software. section. When working with these levels, stakeholders should be aware of holistically considering all levels, because: 'Naturally it is easier to focus on first order impacts as they are immediate and obvious.
20-1.The Life Cycle of Software Products , included in thEENSOFT model, is a LCT inspired product life cycle that can also be attributed with 'from cradle-to-grave'. #relationship:0# 20-2.Its objective is to enable stakeholders to assess impacts on SD according to the three different levels of impacts, as discussed in What is Green and Sustainable Software. #relstionship:0# 20-3.section. 
20-4.When working with these levels, stakeholders should be aware of holistically considering all levels, because: 'Naturally it is easier to focus on first order impacts as they are immediate and obvious.

21.However the third order impacts might be the most threatening ones, and the most difficult ones to approach'. Though, secondand third-order impacts also have huge potentials to promote SD, these still have to be recovered.
21-1.However the third order impacts might be the most threatening ones, and the most difficult ones to approach'. 
21-2.Though, secondand third-order impacts also have huge potentials to promote SD, these still have to be recovered.

22.The development phase The Development Phase accounts for impacts on SD that directly result from activities involved in software development, as well as indirectly involved activities,  pro rata impacts of common corporate departments. Environmental impacts to be considered include, for example, electrical en that is necessary to power the workstations of software developers and other employees, electrical en and natural resources that are necessary to operate the IT infrastructure , en that is necessary for heating and air conditioning, electrical en that is necessary for offices lighting, or en for transportation purposes like long distance business trips for meetings with customers and the development team and even the employees’ daily way to work. Social impacts can be working conditions and payment of offshore workers , which have consequences for the workers and their families.
22-1.The development phase The Development Phase accounts for impacts on SD that directly result from activities involved in software development, as well as indirectly involved activities,  pro rata impacts of common corporate departments. 
22-2.Environmental impacts to be considered include, for example, electrical en that is necessary to power the workstations of software developers and other employees, electrical en and natural resources that are necessary to operate the IT infrastructure , en that is necessary for heating and air conditioning, electrical en that is necessary for offices lighting, or en for transportation purposes like long distance business trips for meetings with customers and the development team and even the employees’ daily way to work. 
22-3.Social impacts can be working conditions and payment of offshore workers , which have consequences for the workers and their families.

23.Some of these impacts can be mitigated by introducing teleworking and teleconferencing, or by replacing material products with adequate immaterial substitutes (second-order effects). This in turn may induce,  changes in organizations, software development methods, or life styles (third-order effects). The development phase also accounts for impacts from software maintenance in the sense of bug solving, because this is also a software development activity and therefore should belong to the development phase.
23-1.Some of these impacts can be mitigated by introducing teleworking and teleconferencing, or by replacing material products with adequate immaterial substitutes (second-order effects). #relationship:0# 23-2.This in turn may induce,  changes in organizations, software development methods, or life styles (third-order effects). 
23-3.The development phase also accounts for impacts from software maintenance in the sense of bug solving, because this is also a software development activity and therefore should belong to the development phase.

24.The distribution phase and the disposal phase The Distribution Phase accounts for impacts on SD that result from distributing the software product. This includes environmental impacts,  of printed manuals (type of paper and ink), chosen means of transport, type and design of the retail and transport packaging , or data medium . Furthermore, if the software product is offered as a download, which is common today, then its download size should be considered, as well as the electrical en and material resources that are necessary to operate the required IT infrastructure. The Disposal Phase accounts for impacts on SD that result from disposal and recycling of the afore mentioned material sub products.
24-1.The distribution phase and the disposal phase The Distribution Phase accounts for impacts on SD that result from distributing the software product. #relationship:0# 24-2.This includes environmental impacts,  of printed manuals (type of paper and ink), chosen means of transport, type and design of the retail and transport packaging , or data medium . #relationship:D# 24-3.Furthermore, if the software product is offered as a download, which is common today, then its download size should be considered, as well as the electrical en and material resources that are necessary to operate the required IT infrastructure. 
24-4.The Disposal Phase accounts for impacts on SD that result from disposal and recycling of the afore mentioned material sub products.

25.The usage phase The Usage Phase considers impacts that result from deploying, using, and maintaining the software product. Here, maintaining means that administrators are in charge of installed software and support users in their organization. Thus, maintaining includes,  the installation of software patches or updates, the configuration of software and computer systems, and the training of employees in regards to proper software usage. As an effect, properly trained users might need less time to complete tasks (which results in less en consumption), configure the software system in a way that it consumes less power, or just switch their computer to suspend mode when they leave their workplace. Beside these effects, software usage has several first-order effects regarding environmental sustainability. In order to deliver its offered services, a computer program requires processing time, which in turn consumes electric en. This may also require the consumption of services offered by other servers , which causes additional power consumption.
25-1.The usage phase The Usage Phase considers impacts that result from deploying, using, and maintaining the software product. 
25-2.Here, maintaining means that administrators are in charge of installed software and support users in their organization. #relationship:A# 25-3.Thus, maintaining includes,  the installation of software patches or updates, the configuration of software and computer systems, and the training of employees in regards to proper software usage. 
25-4.As an effect, properly trained users might need less time to complete tasks (which results in less en consumption), configure the software system in a way that it consumes less power, or just switch their computer to suspend mode when they leave their workplace. 
25-5.Beside these effects, software usage has several first-order effects regarding environmental sustainability. 
25-6.In order to deliver its offered services, a computer program requires processing time, which in turn consumes electric en. #relationship:0# 25-7.This may also require the consumption of services offered by other servers , which causes additional power consumption.

26.In addition, the update strategy of a software product  influences data transfer, processing, and IT infrastructure, which are necessary to deliver updates. Combined, these cause further power and resource consumption. State-of-the-art software systems usually require up-to-date and more powerful hardware than older software systems or previous versions. As a result, this causes hardware replacements in organizations as well as at home, when a new software product is introduced. On the one hand, new hardware is typically more power efficient than older hardware, but on the other hand it has to be taken into account that the production of the new hardware and the disposal of the old hardware causes vast amounts of resource and en consumption. Mining the necessary ores,  in developing countries, where social and environmental standards are very low, leads to considerable social and environmental impacts, which sometimes even culminate in armed conflicts.
26-1.In addition, the update strategy of a software product  influences data transfer, processing, and IT infrastructure, which are necessary to deliver updates. #relationship:0# 26-2.Combined, these cause further power and resource consumption. 
26-3.State-of-the-art software systems usually require up-to-date and more powerful hardware than older software systems or previous versions. #relationship:0# 26-4.As a result, this causes hardware replacements in organizations as well as at home, when a new software product is introduced. 
26-5.On the one hand, new hardware is typically more power efficient than older hardware, but on the other hand it has to be taken into account that the production of the new hardware and the disposal of the old hardware causes vast amounts of resource and en consumption. 
26-6.Mining the necessary ores,  in developing countries, where social and environmental standards are very low, leads to considerable social and environmental impacts, which sometimes even culminate in armed conflicts.

27.There are also reports about old and even non-functional hardware that is exported from industrial countries to developing countries, where it is reused but more often recycled under doubtful circumstances in so called backyard facilities or just deposited on waste disposal sites, causing damage to the environment and people’s health. The second-and third-order effects on SD that result from the usage phase, depend on the purpose of the software product and were briefly discussed in What is Green and Sustainable Software. section (smart-technologies, dematerialization).
27-1.There are also reports about old and even non-functional hardware that is exported from industrial countries to developing countries, where it is reused but more often recycled under doubtful circumstances in so called backyard facilities or just deposited on waste disposal sites, causing damage to the environment and people’s health. 
27-2.The second-and third-order effects on SD that result from the usage phase, depend on the purpose of the software product and were briefly discussed in What is Green and Sustainable Software. #relationship:0# 27-3.section (smart-technologies, dematerialization).

28.If a software product is taken out of service, it is mostly necessary to convert the available data to a format that can be processed by the succeeding software product, or to make it accessible in some other ways. If the data cannot be converted easily,  because it is stored in a proprietary data format, this may have an impact on economic sustainability of an organization. In this phase, even the backup size of data matters,  if legal regulations require long-term storage of data.
28-1.If a software product is taken out of service, it is mostly necessary to convert the available data to a format that can be processed by the succeeding software product, or to make it accessible in some other ways. 
28-2.If the data cannot be converted easily,  because it is stored in a proprietary data format, this may have an impact on economic sustainability of an organization. 
28-3.In this phase, even the backup size of data matters,  if legal regulations require long-term storage of data.

29.Sustainability criteria and metrics Our model has the ability to represent three categories of sustainability criteria and metrics for software products: Common Quality Criteria and Metrics, Directly Related Criteria and Metrics, and Indirectly Related Criteria and Metrics. The first relates to common quality criteria for software, which are well known from, . The second comprises criteria and metrics that relate to first-order effects (effects of ICT supply). The last includes criteria and metrics geared towards second-order (effects of ICT use) and third-order effects (systemic effects of ICT). All criteria should also be classified according to the phases of our proposed software product life cycle. Additionally, it is also necessary to classify criteria and metrics according to the type of software.
29-1.Sustainability criteria and metrics Our model has the ability to represent three categories of sustainability criteria and metrics for software products: Common Quality Criteria and Metrics, Directly Related Criteria and Metrics, and Indirectly Related Criteria and Metrics. 
29-2.The first relates to common quality criteria for software, which are well known from, . 
29-3.The second comprises criteria and metrics that relate to first-order effects (effects of ICT supply). 
29-4.The last includes criteria and metrics geared towards second-order (effects of ICT use) and third-order effects (systemic effects of ICT). 
29-5.All criteria should also be classified according to the phases of our proposed software product life cycle. #relationship:D# 29-6.Additionally, it is also necessary to classify criteria and metrics according to the type of software.

30.Albertao  interpret common software quality properties and associated metrics on the background of SD. They classify the quality properties into development, usage, and process related properties. However, they do not classify the effects according to the three tier model of effects of ICTs on SD. Notwithstanding this, their findings can be subsumed by thEENSOFT Model.
30-1.Albertao  interpret common software quality properties and associated metrics on the background of SD. 
30-2.They classify the quality properties into development, usage, and process related properties. #relationship:B# 30-3.However, they do not classify the effects according to the three tier model of effects of ICTs on SD. #relationship:0# 30-4.Notwithstanding this, their findings can be subsumed by thEENSOFT Model.

31.The questions in the life cycle of thEENSOFT Model are not: in which phases are metrics applied, or in which phases are measures taken, in order to improve the corresponding quality properties. Rather, the question is: in which life cycle phase can the related effects be observed. Hence, the quality properties 'Modifiability' and 'Reusability' take effect in the Development Phase, whereas the properties 'Portability', 'Supportability', 'Performance', 'Dependability', 'Usability', and 'Accessibility' take effect in the Usage Phase. The process related properties 'Predictability' ('The team’s ability to accurately estimate effort and cost upfront') and 'Efficiency' ('The overhead of production processes over the bottom line value perceived by the customer') also take effect in the Development Phase, as well as the 'Project’s Footprint' ('Natural resources and environmental impact used during software development').
31-1.The questions in the life cycle of thEENSOFT Model are not: in which phases are metrics applied, or in which phases are measures taken, in order to improve the corresponding quality properties. 
31-2.Rather, the question is: in which life cycle phase can the related effects be observed. #relationship:A# 31-3.Hence, the quality properties 'Modifiability' and 'Reusability' take effect in the Development Phase, whereas the properties 'Portability', 'Supportability', 'Performance', 'Dependability', 'Usability', and 'Accessibility' take effect in the Usage Phase. 
31-4.The process related properties 'Predictability' ('The team’s ability to accurately estimate effort and cost upfront') and 'Efficiency' ('The overhead of production processes over the bottom line value perceived by the customer') also take effect in the Development Phase, as well as the 'Project’s Footprint' ('Natural resources and environmental impact used during software development').

32.The property 'Portability' is interpreted by Albertao  on the background of hardware obsolescence, which means that the lifetime of hardware should be prolonged to the end of its useful lifetime, instead of causing its early replacement due to hardware requirements imposed by a software product. According to Hilty based on a LCA study by ter , desktop PCs should not be used for less than approx. 5 years. After 5 years of use, the ecological impacts resulting mainly from the en demand of the usage phase outw those of the production phase. These findings are also supported by a recent LCA study by a manufacturer of ICTs. This is different for servers, because a server in 24/7 operation mode reaches the point of equilibrium earlier, according to the figures presented by after approx. Due to the fact that there will be higher rates of renewable en and more en efficient hardware in the future, it will take even longer until the environmental impacts of the usage phase outperform these of the production phase. For that reason, software induced hardware obsolescence is of particular importance. Hence, hardware obsolescence should be a genuine quality property of green and sustainable software, which belongs to the Directly Related Criteria and Metrics model part.
32-1.The property 'Portability' is interpreted by Albertao  on the background of hardware obsolescence, which means that the lifetime of hardware should be prolonged to the end of its useful lifetime, instead of causing its early replacement due to hardware requirements imposed by a software product. 
32-2.According to Hilty based on a LCA study by ter , desktop PCs should not be used for less than approx. 5 years. 
32-3.After 5 years of use, the ecological impacts resulting mainly from the en demand of the usage phase outw those of the production phase. #relationship:0# 32-4.These findings are also supported by a recent LCA study by a manufacturer of ICTs. #relationship:0# 32-5.This is different for servers, because a server in 24/7 operation mode reaches the point of equilibrium earlier, according to the figures presented by after approx. #relationship:0# 32-6.Due to the fact that there will be higher rates of renewable en and more en efficient hardware in the future, it will take even longer until the environmental impacts of the usage phase outperform these of the production phase. 
32-7.For that reason, software induced hardware obsolescence is of particular importance. #relationship:A# 32-8.Hence, hardware obsolescence should be a genuine quality property of green and sustainable software, which belongs to the Directly Related Criteria and Metrics model part.

33.Another directly related quality property is en efficiency. This is not the same as run time efficiency or performance, because its goal is to optimize en consumption in relation to delivered service items. For a software running on a single computer, en efficiency and performance may be closely related, but there may beater differences for distributed systems. In this area, consider,  service level agreements or performance requirements that necessitate additional servers to handle peak loads. Here, it may be possible to increase en efficiency by relaxing performance requirements for peak loads. Another possibility may be the relaxation of required service quality down to a level that is still acceptable for users. Depending on the area of application, it may be possible to use approximations instead of accurate calculations, which may require less processing. Consider,  a search ne that delivers a huge amount of accurate search results compared to one that ensures this accuracy only for the topmost results that are used most widely by the users but is less accurate regarding the following results. Another example are mathematical calculations, which may be only as accurate as they are needed to be acceptable for the purpose of the software application.
33-1.Another directly related quality property is en efficiency. This is not the same as run time efficiency or performance, because its goal is to optimize en consumption in relation to delivered service items. 
33-2.For a software running on a single computer, en efficiency and performance may be closely related, but there may beater differences for distributed systems. 
33-3.In this area, consider,  service level agreements or performance requirements that necessitate additional servers to handle peak loads. Here, it may be possible to increase en efficiency by relaxing performance requirements for peak loads. 
33-4.Another possibility may be the relaxation of required service quality down to a level that is still acceptable for users. 
33-5.Depending on the area of application, it may be possible to use approximations instead of accurate calculations, which may require less processing. #relationship:C# 33-6.Consider,  a search ne that delivers a huge amount of accurate search results compared to one that ensures this accuracy only for the topmost results that are used most widely by the users but is less accurate regarding the following results. 
33-7.Another example are mathematical calculations, which may be only as accurate as they are needed to be acceptable for the purpose of the software application.

34.In addition to these software artifacts and development process related properties, there are also properties, which belong to the developing organization. Organizations that develop green and sustainable software should commit themselves to environmental and social responsibility, expressed,  in environmental and social responsibility statements, their commitment to international labor standards, or the application of environmental management systems. These commitments should also cover environmental and social standards throughout the entire supply chain of all products and services, which are necessary to produce, advertise, distribute, and dispose/recycle the software product or parts of it.
34-1.In addition to these software artifacts and development process related properties, there are also properties, which belong to the developing organization. 
34-2.Organizations that develop green and sustainable software should commit themselves to environmental and social responsibility, expressed,  in environmental and social responsibility statements, their commitment to international labor standards, or the application of environmental management systems. #relationship:0# 34-3.These commitments should also cover environmental and social standards throughout the entire supply chain of all products and services, which are necessary to produce, advertise, distribute, and dispose/recycle the software product or parts of it.

35.Indirectly Related Criteria and Metrics for green and sustainable software address second- and third-order effects induced by a software product. Using a software product may achieve en and resource savings in other branches or usage areas. Although it is hard to identify these second- and third-order effects, there may be effects that can be measured and approximated anyway, i.e. when the software product has a special purpose like smart heating and air-conditioning of buildings. Even harder to recognize are social effects connected with a software product. Because these effects specifically depend on the software product’s purpose and area of application, it is not possible to define appropriate metrics or criteria to recognize these in general. Examples are how social networks change the way to communicate and to interact, and the way production chains are altered, since ICTs almost allow world-wide production in real time.
35-1.Indirectly Related Criteria and Metrics for green and sustainable software address second- and third-order effects induced by a software product. Using a software product may achieve en and resource savings in other branches or usage areas. 
35-2.Although it is hard to identify these second- and third-order effects, there may be effects that can be measured and approximated anyway, i.e. when the software product has a special purpose like smart heating and air-conditioning of buildings. 
35-3.Even harder to recognize are social effects connected with a software product. #relationship:A# 35-4.Because these effects specifically depend on the software product’s purpose and area of application, it is not possible to define appropriate metrics or criteria to recognize these in general. #relationship:C# 35-5.Examples are how social networks change the way to communicate and to interact, and the way production chains are altered, since ICTs almost allow world-wide production in real time.

36.Procedure models Starting from our definitions, Green and Sustainable Software neering produces Green and Sustainable Software in an environmental-friendly and sustainable way. Consequently, during the neering process, the whole life cycle of the neered software product has to be taken into account, as well as the circumstances under which it will be produced.
36-1.Procedure models Starting from our definitions, Green and Sustainable Software neering produces Green and Sustainable Software in an environmental-friendly and sustainable way. #relationship:A# 36-2.Consequently, during the neering process, the whole life cycle of the neered software product has to be taken into account, as well as the circumstances under which it will be produced.

37.Sub-procedure model 'Develop' In this section, we present an example of a software development process that fits into the category Develop of the procedure model part of thEENSOFT Model. This example  does not implement a complete software development process. Instead, it proposes several enhancements for arbitrary software development processes that enable stakeholders to recognize impacts, which result from 'producing' the software product, and impacts, which result from using the software product. The proposed enhancements are: Sustainability Reviews & Previews, Process Assessment, Sustainability Journal, and the so called Sustainability Retrospective. In principle, the enhancements form a continuous improvement cycle that deals with sustainability issues. Process Assessment helps to optimize the sustainability of the 'production' process, whereas Sustainability Reviews & Previews help to optimize the sustainability of the evolving software product. Both efforts are combined by the Sustainability Retrospective, so that finally impacts over the whole life cycle of the software product are covered. Sustainability Reviews & Previews take a look at the work done, assess outcomes according to sustainability issues, and develop measures, which are realized until the next Sustainability Review & Preview in order to optimize the sustainability of the software product under development. These reviews take software aspects, like requirements, architecture, or coding into account that have impacts on sustainability. In Sustainability Reviews & Previews, which take the role of a formative evaluation, not only these software aspects are taken into account, but also impacts that result from the development process itself. The Process Assessment activity continuously monitors the development process. Therefore, different data from the development process is gathered in order to assess its impacts on SD, and to identify factors that should be optimized in order to improve the process. This data can also be used as a basis to perform a LCA of the software product.
37-1.Sub-procedure model 'Develop' In this section, we present an example of a software development process that fits into the category Develop of the procedure model part of thEENSOFT Model. #relationship:0# 37-2.This example  does not implement a complete software development process. #relationship:B# 37-3.Instead, it proposes several enhancements for arbitrary software development processes that enable stakeholders to recognize impacts, which result from 'producing' the software product, and impacts, which result from using the software product. 
37-4.The proposed enhancements are: Sustainability Reviews & Previews, Process Assessment, Sustainability Journal, and the so called Sustainability Retrospective. 
37-5.In principle, the enhancements form a continuous improvement cycle that deals with sustainability issues. 
37-6.Process Assessment helps to optimize the sustainability of the 'production' process, whereas Sustainability Reviews & Previews help to optimize the sustainability of the evolving software product. #relationship:0# 37-7.Both efforts are combined by the Sustainability Retrospective, so that finally impacts over the whole life cycle of the software product are covered. 
37-8.Sustainability Reviews & Previews take a look at the work done, assess outcomes according to sustainability issues, and develop measures, which are realized until the next Sustainability Review & Preview in order to optimize the sustainability of the software product under development. #relationship:0# 37-9.These reviews take software aspects, like requirements, architecture, or coding into account that have impacts on sustainability. 
37-10.In Sustainability Reviews & Previews, which take the role of a formative evaluation, not only these software aspects are taken into account, but also impacts that result from the development process itself. 
37-11.The Process Assessment activity continuously monitors the development process. #relationship:A# 37-12.Therefore, different data from the development process is gathered in order to assess its impacts on SD, and to identify factors that should be optimized in order to improve the process. #relationship:0# 37-13.This data can also be used as a basis to perform a LCA of the software product.

38.The Sustainability Retrospective sums up the data collected by Sustainability Reviews & Previews and Process Assessment, assesses the overall impact on SD of the software product, and looks for ways to improve the sustainability of upcoming software projects and their software products. Further outcomes of the Sustainability Retrospective are,  assessments and group reflections of impacts on SD of the developed software product and the development process, decisions for future projects, lessons learned, or best practices regarding sustainability issues of software products and development processes.
38-1.The Sustainability Retrospective sums up the data collected by Sustainability Reviews & Previews and Process Assessment, assesses the overall impact on SD of the software product, and looks for ways to improve the sustainability of upcoming software projects and their software products. 
38-2.Further outcomes of the Sustainability Retrospective are,  assessments and group reflections of impacts on SD of the developed software product and the development process, decisions for future projects, lessons learned, or best practices regarding sustainability issues of software products and development processes.

39.It should be mentioned, that this procedure model sets only an organizational framework that helps managing sustainability of a software product. Thus, there is no guarantee that the resulting software products are more sustainable than they would have been without applying this process. Besides reflecting the proposed life cycle of a software product, there are further methods that support software architects, designers, and developers in producing green and sustainable software applications. On the one hand, there are tools that automatically calculate software metrics from source code or compiled artifacts. As was shown above, these metrics and their corresponding quality properties can also be interpreted regarding sustainability. On the other hand, producing ecologically sound, resource and en efficient software is also an issue nowadays. For this purpose early processing time estimations, en consumption estimations, and en consumption measurements may be appropriate. Early processing time estimations can be obtained from a software performance estimation method, introduced by Smith and Williams. This method estimates performance values already in early design stages of a software product. It starts with rough estimations based on early UML sequence diagrams and refines these estimations as the UML model evolves. This results in a so called software execution model. The system execution model models the target hardware platform with its limited resources . The software execution model can be applied to the system execution model with a discrete event simulator in order to get performance estimations for realistic workloads. This approach helps to design software architectures that perform well on a specific hardware platform, and it helps to identify design flaws that reduce runtime efficiency. Currently, there is no software tool available that allows the estimation of en consumption in these early design stages. So we recommend using the software performance approach as an indicator of en efficiency.
39-1.It should be mentioned, that this procedure model sets only an organizational framework that helps managing sustainability of a software product. #relationship:A# 39-2.Thus, there is no guarantee that the resulting software products are more sustainable than they would have been without applying this process. 
39-3.Besides reflecting the proposed life cycle of a software product, there are further methods that support software architects, designers, and developers in producing green and sustainable software applications. 
39-4.On the one hand, there are tools that automatically calculate software metrics from source code or compiled artifacts. #relationship:0# 39-5.As was shown above, these metrics and their corresponding quality properties can also be interpreted regarding sustainability. 
39-6.On the other hand, producing ecologically sound, resource and en efficient software is also an issue nowadays. #relationship:0# 39-7.For this purpose early processing time estimations, en consumption estimations, and en consumption measurements may be appropriate. 
39-8.Early processing time estimations can be obtained from a software performance estimation method, introduced by Smith and Williams. #relationship:0# 39-9.This method estimates performance values already in early design stages of a software product. #relationship:0# 39-10.It starts with rough estimations based on early UML sequence diagrams and refines these estimations as the UML model evolves. #relationship:0# 39-11.This results in a so called software execution model. 
39-12.The system execution model models the target hardware platform with its limited resources . #relationship:0# 39-13.The software execution model can be applied to the system execution model with a discrete event simulator in order to get performance estimations for realistic workloads. #relationship:0# 39-14.This approach helps to design software architectures that perform well on a specific hardware platform, and it helps to identify design flaws that reduce runtime efficiency. 
39-15.Currently, there is no software tool available that allows the estimation of en consumption in these early design stages. #relationship:A# 39-16.So we recommend using the software performance approach as an indicator of en efficiency.

40.In a software project, when the first deployable software artifacts are available, it is easily possible to measure their en consumption, either by measuring the en consumption directly or by using performance monitor counters of modern processors as indicators. These measurements complement the early estimations and can provide further indications on software components that induce high en consumption and should therefore be optimized with priority.
40-1.In a software project, when the first deployable software artifacts are available, it is easily possible to measure their en consumption, either by measuring the en consumption directly or by using performance monitor counters of modern processors as indicators. #relationship:0# 40-2.These measurements complement the early estimations and can provide further indications on software components that induce high en consumption and should therefore be optimized with priority.

41.Based on these software architecture and software development centric measures, software developing organizations should also estimate the total en and resource demand that is expected according to their projected number of installations or sales figures of a specific product and associated estimated usage scenarios. These estimations should not only include first-order impacts of the usage phase, but also first-order impacts of the other phases, especially of the distribution phase. As a further step and depending on the type of software, it may also be possible to estimate secondand third-order impacts respectively. These can be used to substantiate the necessity to improve the sustainability of a software product from a broader point of view.
41-1.Based on these software architecture and software development centric measures, software developing organizations should also estimate the total en and resource demand that is expected according to their projected number of installations or sales figures of a specific product and associated estimated usage scenarios. #relationship:0# 41-2.These estimations should not only include first-order impacts of the usage phase, but also first-order impacts of the other phases, especially of the distribution phase. 
41-3.As a further step and depending on the type of software, it may also be possible to estimate secondand third-order impacts respectively. #relationship:0# 41-4.These can be used to substantiate the necessity to improve the sustainability of a software product from a broader point of view.

42.Sub-procedure model 'Purchase' Our outline of an exemplary procedure model that fits into the Purchase category focuses mainly on governmental organizations and large enterprises that use structured tendering procedures in large scale procurement projects. Especially the large market power of governmental organizations should not be underestimated and can be used to pursue sustainability goals according to national  and international agreements . A typical procurement process has the following steps: define subject matter, define requirements, select bidders, evaluate bids, and conclude contract. Due to legal reasons, it is necessary that sustainability issues, i.e. ecological and social requirements, are clearly stated in the tender’s subject matter, in specifications and in contract performance clauses. Furthermore, the entire product life cycle of the software product should be addressed, as well as the entire supply chain. Our proposal for a sustainable software procurement process can be divided into two fields: the procurement of custom software products and the procurement of standard software products. In both scenarios, bidders should, in principle, be able to deliver the requested product in the required quality. Hence, bidders may be preselected with appropriate criteria, like the company’s social and environmental responsibility , their commitment to international labor standards or the application of environmental management systems.
42-1.Sub-procedure model 'Purchase' Our outline of an exemplary procedure model that fits into the Purchase category focuses mainly on governmental organizations and large enterprises that use structured tendering procedures in large scale procurement projects. 
42-2.Especially the large market power of governmental organizations should not be underestimated and can be used to pursue sustainability goals according to national  and international agreements . 
42-3.A typical procurement process has the following steps: define subject matter, define requirements, select bidders, evaluate bids, and conclude contract. 
42-4.Due to legal reasons, it is necessary that sustainability issues, i.e. ecological and social requirements, are clearly stated in the tender’s subject matter, in specifications and in contract performance clauses. #relationship:D# 42-5.Furthermore, the entire product life cycle of the software product should be addressed, as well as the entire supply chain. 
42-6.Our proposal for a sustainable software procurement process can be divided into two fields: the procurement of custom software products and the procurement of standard software products. 
42-7.In both scenarios, bidders should, in principle, be able to deliver the requested product in the required quality. #relationship:A# 42-8.Hence, bidders may be preselected with appropriate criteria, like the company’s social and environmental responsibility , their commitment to international labor standards or the application of environmental management systems.

43.For custom software products, non-functional requirements like en efficiency or requirements addressing mitigation of IT infrastructure obsolescence, which may be induced by the tendered software product, can be defined. However, it is necessary to provide applicable measurement methods and acceptable maximum measurement values for bidders. From a practical point of view, this is only possible if a comparable software product is available that can be used as reference,  if a legacy software system is replaced with a new one. If such values cannot be provided, purchasers can define contract performance clauses that pl the contractor to establish measures, which encourage a sustainable software product. This includes the application of a sustainable software development process, environment management systems, or the assertion of social standards along the entire supply chain .
43-1.For custom software products, non-functional requirements like en efficiency or requirements addressing mitigation of IT infrastructure obsolescence, which may be induced by the tendered software product, can be defined. #relationship:B# 43-2.However, it is necessary to provide applicable measurement methods and acceptable maximum measurement values for bidders. #relationship:0# 43-3.From a practical point of view, this is only possible if a comparable software product is available that can be used as reference,  if a legacy software system is replaced with a new one. 
43-4.If such values cannot be provided, purchasers can define contract performance clauses that pl the contractor to establish measures, which encourage a sustainable software product. #relationship:0# 43-5.This includes the application of a sustainable software development process, environment management systems, or the assertion of social standards along the entire supply chain (includes also subcontractors).

44.For standard software products, en efficiency and hardware obsolescence criteria can be either used as technical requirements or as award criteria. Usually, their limit values and wting in the selection procedure must be documented in the tendering documents, which means that these cannot be altered after the tendering procedure has started. Purchasing software or purchasing the appropriate hardware for a software product is also of high relevance for home users. It is clear, that home users, as well as purchasers of micro and small enterprises, require information on sustainability issues that can be obtained easily. This may be accomplished by printing the according information on product boxes or product sheets. In this way, the customers can make informed decisions on which product fits their needs best. Hence, there may be a label for software products similar to the EN STAR®5 that indicates whether a software product is en efficient or meets certain sustainability requirements in the future.
44-1.For standard software products, en efficiency and hardware obsolescence criteria can be either used as technical requirements or as award criteria. #relationship:0# 44-2.Usually, their limit values and wting in the selection procedure must be documented in the tendering documents, which means that these cannot be altered after the tendering procedure has started. 
44-3.Purchasing software or purchasing the appropriate hardware for a software product is also of high relevance for home users. 
44-4.It is clear, that home users, as well as purchasers of micro and small enterprises, require information on sustainability issues that can be obtained easily. #relationship:0# 44-5.This may be accomplished by printing the according information on product boxes or product sheets. #relationship:0# 44-5.In this way, the customers can make informed decisions on which product fits their needs best. #relationship:A# 44-6.Hence, there may be a label for software products similar to the EN STAR®5 that indicates whether a software product is en efficient or meets certain sustainability requirements in the future.

45.Sub-procedure model 'Administrate' In our model, 'administrate' means making software available by installing, configuring, and maintaining it. This also covers educating and training users, who work with the software in an organization. Configuring software products covers only configuration from an organizational point of view, here called 'macro-configuration'. Configurations that can be done by users without the need for special system permissions,  installing add-ons for browsers, configuring a word processor via its preferences dialog, , are covered as 'micro-configuration' by the sub-procedure model Use. Hence, the macro-configuration covers system configuration and maintenance of desktop PCs, thin-clients, as well as servers and virtualized data centers. Especially, the various publications on data center en efficiency fit into this model part .
45-1.Sub-procedure model 'Administrate' In our model, 'administrate' means making software available by installing, configuring, and maintaining it. #relationship:0# 45-2.This also covers educating and training users, who work with the software in an organization. 
45-3.Configuring software products covers only configuration from an organizational point of view, here called 'macro-configuration'. 
45-4.Configurations that can be done by users without the need for special system permissions,  installing add-ons for browsers, configuring a word processor via its preferences dialog, , are covered as 'micro-configuration' by the sub-procedure model Use. #relationship:A# 45-5.Hence, the macro-configuration covers system configuration and maintenance of desktop PCs, thin-clients, as well as servers and virtualized data centers. 
45-6.Especially, the various publications on data center en efficiency fit into this model part .

46.A minimalistic procedure model should implement a continuous improvement cycle, which follows the plan-do-check-act paradigm. Here, i.e. en efficiency, en consumption, and resource consumption should be checked regularly in order to improve these with appropriate measures. This is not merely limited to data center operations, but rather includes networking infrastructure, desktop computers, installed software, and users, served by an IT service division of an organization. Especially in organizations that implement service desks in line with the IT Infrastructure Library in order to support their IT users, the mission of service desks also is to advise users proactively on software configuration and usage regarding sustainability issues like en and resource conservation.
46-1.A minimalistic procedure model should implement a continuous improvement cycle, which follows the plan-do-check-act paradigm. #relationship:0# 46-2.Here, i.e. en efficiency, en consumption, and resource consumption should be checked regularly in order to improve these with appropriate measures. #relationship:0# 46-3.This is not merely limited to data center operations, but rather includes networking infrastructure, desktop computers, installed software, and users, served by an IT service division of an organization. 
46-4.Especially in organizations that implement service desks in line with the IT Infrastructure Library in order to support their IT users, the mission of service desks also is to advise users proactively on software configuration and usage regarding sustainability issues like en and resource conservation.

47.Sub-procedure model 'Use' Procedures for users, either professional or home users, related to green and sustainable software, cannot be put into a static workflow or procedure model, because these are mainly ad-hoc procedures. Nevertheless, similarly to the sub-procedure model component Administrate, a continuous improvement cycle can be applied intuitively. In this context, users should reflect on each of their actions that may have negative impacts on SD in order to search for appropriatidance that helps mitigating these negative impacts.
47-1.Sub-procedure model 'Use' Procedures for users, either professional or home users, related to green and sustainable software, cannot be put into a static workflow or procedure model, because these are mainly ad-hoc procedures. #relationship:B# 47-2.Nevertheless, similarly to the sub-procedure model component Administrate, a continuous improvement cycle can be applied intuitively. #relationship:0# 47-3.In this context, users should reflect on each of their actions that may have negative impacts on SD in order to search for appropriatidance that helps mitigating these negative impacts.

48.As already mentioned in Sub-procedure model 'Administrate' section, users do some kind of 'micro-configuration' like installing add-ons in web browsers, configuring the word processor,  and they use software products. However, because of the absence of a more formalized process and the ad-hoc character of the actions, procedures are more or less represented directly as recommendations for action likidelines or checklists.
48-1.As already mentioned in Sub-procedure model 'Administrate' section, users do some kind of 'micro-configuration' like installing add-ons in web browsers, configuring the word processor,  and they use software products. #relationship:B# 48-2.However, because of the absence of a more formalized process and the ad-hoc character of the actions, procedures are more or less represented directly as recommendations for action likidelines or checklists.

49.Recommendations and tools Recommendations and Tools address stakeholders with different roles. General roles considered distinctly by thEENSOFT Model are: Developer, Purchaser, Administrator, and User. However, there may be more specialized roles, like Requirements neer, Software Architect, Web Administrator, or Application Deployer. In principle, these can be subsumed by thneral roles mentioned before. Recommendations and Tools support stakeholders with different skill levels in applying green and sustainable techniques when developing, administrating or using software products. Recommendations can bidelines, checklists, best practice examples, implementation reports,  Tools can be software tools, but also any other tool, like paper-based data collection sheets. There are plenty of recommendations available,  on the Internet, but unfortunately these are hard to find. Hence, a specialized Internet search ne or knowl base would make it easier to find them.
49-1.Recommendations and tools Recommendations and Tools address stakeholders with different roles. 
49-2.General roles considered distinctly by thEENSOFT Model are: Developer, Purchaser, Administrator, and User. #relationship:B# 49-3.However, there may be more specialized roles, like Requirements neer, Software Architect, Web Administrator, or Application Deployer. 
49-4.In principle, these can be subsumed by thneral roles mentioned before. 
49-5.Recommendations and Tools support stakeholders with different skill levels in applying green and sustainable techniques when developing, administrating or using software products. 
49-6.Recommendations can bidelines, checklists, best practice examples, implementation reports,  Tools can be software tools, but also any other tool, like paper-based data collection sheets. 
49-7.There are plenty of recommendations available,  on the Internet, but unfortunately these are hard to find. #relationship:A# 49-8.Hence, a specialized Internet search ne or knowl base would make it easier to find them.

50.provididance on how to design and develop en efficient software, or givneral hints on how to design and develop resource efficient software. Available tools focus on en or resource efficiency of software or services. For administrators, there aridelines available that describe best practices for en efficient data centers. Some of thesidelines are accompanied by appropriate tools. For purchasers, there aridelines available that describe sustainable procurement of IT equipment, in accordance with tendering regulations. For users, there aridelines and tools available that support users in making informed decisions on hardware, software, and services they use or plan to use. Other tools likano.la6 directly help saving en by reconfiguring the power management of the computer system according to current performance demands.
50-1.provididance on how to design and develop en efficient software, or givneral hints on how to design and develop resource efficient software. 
50-2.Available tools focus on en or resource efficiency of software or services. 
50-3.For administrators, there aridelines available that describe best practices for en efficient data centers. #relationship:0# 50-4.Some of thesidelines are accompanied by appropriate tools. 
50-5.For purchasers, there aridelines available that describe sustainable procurement of IT equipment, in accordance with tendering regulations. 
50-6.For users, there aridelines and tools available that support users in making informed decisions on hardware, software, and services they use or plan to use. 
50-7.Other tools likano.la6 directly help saving en by reconfiguring the power management of the computer system according to current performance demands.

51.The main objective of our proposed GREENSOFT Model is to structure concepts, strategies, activities, and processes of Green IT and hereby especially of green and sustainable software and its neering. Our model acts as a reference model, which helps to organize and classify research results, actions, frameworks, process models,  Additionally, thEENSOFT Model involves an inherent roadmap and depicts which direction future developments regarding the interconnection of ICT and SD can take. The model also suggests how 'conventional' models of ICT,  standard software process models or tendering procedures, can be enriched regarding sustainability. Consequently, at first we defined what Green and Sustainable Software is and what Green and Sustainable Software neering means. Starting with these definitions we described in our contribution the four main parts of thEENSOFT Model: (1) the life cycle of a software product regarding a cradle-to-grave approach and (2) criteria and metrics for direct and indirect effects of software on SD.
51-1.The main objective of our proposed GREENSOFT Model is to structure concepts, strategies, activities, and processes of Green IT and hereby especially of green and sustainable software and its neering. 
51-2.Our model acts as a reference model, which helps to organize and classify research results, actions, frameworks, process models.  #relationship:D# 51-3.Additionally, thEENSOFT Model involves an inherent roadmap and depicts which direction future developments regarding the interconnection of ICT and SD can take. 
51-4.The model also suggests how 'conventional' models of ICT,  standard software process models or tendering procedures, can be enriched regarding sustainability. 
51-5.Consequently, at first we defined what Green and Sustainable Software is and what Green and Sustainable Software neering means. 
51-6.Starting with these definitions we described in our contribution the four main parts of thEENSOFT Model: (1) the life cycle of a software product regarding a cradle-to-grave approach and (2) criteria and metrics for direct and indirect effects of software on SD.

52.Furthermore, we (3) included procedure models for developing, purchasing, operating and using sustainably sound software in a sustainably sound way and (4), in order to put the model into practice, thEENSOFT Model contains a framework for recommendations for action and tools. We showed that a software product is not merely made up of software artifacts, but rather of many other products and services that are involved in a software products’ life cycle. All these products and services have plenty of impacts on SD that must be considered in order to figure out if a software product is green or sustainable. Furthermore, using the software product leads to effects on SD. Here, especially second- and thirdorder effects can either exceed or even out-Herod first-order effects.
52-1.Furthermore, we (3) included procedure models for developing, purchasing, operating and using sustainably sound software in a sustainably sound way and (4), in order to put the model into practice, thEENSOFT Model contains a framework for recommendations for action and tools. 
52-2.We showed that a software product is not merely made up of software artifacts, but rather of many other products and services that are involved in a software products’ life cycle. #relationship:0# 52-3.All these products and services have plenty of impacts on SD that must be considered in order to figure out if a software product is green or sustainable. #relationship:D# 52-4.Furthermore, using the software product leads to effects on SD. 
52-5.Here, especially second- and thirdorder effects can either exceed or even out-Herod first-order effects.

53.Our GREENSOFT Model takes those effects, the life cycle of software, different user roles, and different activities into account. Also aspects like 'Green IT' vs. 'Green by IT' are integrated. Different approaches regarding Green IT, Sustainable IT, ICT for Sustainability,  can be structured and classified into the model. Furthermore, the model can be adopted in order to unfold software related Green IT activities in business and science. However, in every decision regarding Green IT, one must bear in mind that every additional software product consumes additional en. Consequently, these effects must be compared with the benefits using this special software product resp.. Our GREENSOFT Model helps to find a comprehensive solution.
53-1.Our GREENSOFT Model takes those effects, the life cycle of software, different user roles, and different activities into account. 
53-2.Also aspects like 'Green IT' vs. 'Green by IT' are integrated. 
53-3.Different approaches regarding Green IT, Sustainable IT, ICT for Sustainability,  can be structured and classified into the model. #relationship:D# 53-4.Furthermore, the model can be adopted in order to unfold software related Green IT activities in business and science. #relationship:B# 53-5.However, in every decision regarding Green IT, one must bear in mind that every additional software product consumes additional en. 
53-6.Consequently, these effects must be compared with the benefits using this special software product resp.. 
53-7.Our GREENSOFT Model helps to find a comprehensive solution.